From 408a6168f1e9a7477b8a4854750d0ecc1aa9391c Mon Sep 17 00:00:00 2001
From: Brahmajit Das <brahmajit.xyz@gmail.com>
Date: Wed, 4 Sep 2024 08:41:02 +0000
Subject: [PATCH] sys-auth/elogind: Musl build fixes for 255.5

Signed-off-by: Brahmajit Das <brahmajit.xyz@gmail.com>
---
 sys-auth/elogind/elogind-255.5-r1.ebuild      | 168 +++++++++++++++
 .../elogind/files/elogind-255.5-musl.patch    | 196 ++++++++++++++++++
 2 files changed, 364 insertions(+)
 create mode 100644 sys-auth/elogind/elogind-255.5-r1.ebuild
 create mode 100644 sys-auth/elogind/files/elogind-255.5-musl.patch

diff --git a/sys-auth/elogind/elogind-255.5-r1.ebuild b/sys-auth/elogind/elogind-255.5-r1.ebuild
new file mode 100644
index 0000000000000..a8e874ca8ba42
--- /dev/null
+++ b/sys-auth/elogind/elogind-255.5-r1.ebuild
@@ -0,0 +1,168 @@
+# Copyright 1999-2024 Gentoo Authors
+# Distributed under the terms of the GNU General Public License v2
+
+EAPI=8
+
+PYTHON_COMPAT=( python3_{10..13} )
+
+if [[ ${PV} = *9999* ]]; then
+	EGIT_BRANCH="v255-stable"
+	EGIT_REPO_URI="https://github.com/elogind/elogind.git"
+	inherit git-r3
+else
+	SRC_URI="https://github.com/${PN}/${PN}/archive/v${PV}.tar.gz -> ${P}.tar.gz"
+	KEYWORDS="~alpha ~amd64 ~arm ~arm64 ~hppa ~ia64 ~loong ~mips ~ppc ~ppc64 ~riscv ~s390 ~sparc ~x86"
+fi
+
+inherit linux-info meson pam python-any-r1 udev xdg-utils
+
+DESCRIPTION="The systemd project's logind, extracted to a standalone package"
+HOMEPAGE="https://github.com/elogind/elogind"
+
+LICENSE="CC0-1.0 LGPL-2.1+ public-domain"
+SLOT="0"
+IUSE="+acl audit cgroup-hybrid debug doc +pam +policykit selinux test"
+RESTRICT="!test? ( test )"
+
+BDEPEND="
+	app-text/docbook-xml-dtd:4.2
+	app-text/docbook-xml-dtd:4.5
+	app-text/docbook-xsl-stylesheets
+	dev-util/gperf
+	virtual/pkgconfig
+	$(python_gen_any_dep 'dev-python/jinja[${PYTHON_USEDEP}]')
+	$(python_gen_any_dep 'dev-python/lxml[${PYTHON_USEDEP}]')
+"
+DEPEND="
+	audit? ( sys-process/audit )
+	sys-apps/util-linux
+	sys-libs/libcap
+	virtual/libudev:=
+	acl? ( sys-apps/acl )
+	pam? ( sys-libs/pam )
+	selinux? ( sys-libs/libselinux )
+"
+RDEPEND="${DEPEND}
+	!sys-apps/systemd
+"
+PDEPEND="
+	sys-apps/dbus
+	policykit? ( sys-auth/polkit )
+"
+
+DOCS=( README.md)
+
+PATCHES=(
+	"${FILESDIR}/${PN}-252.9-nodocs.patch"
+	"${FILESDIR}/${PN}-255.5-musl.patch"
+)
+
+python_check_deps() {
+	python_has_version "dev-python/jinja[${PYTHON_USEDEP}]" &&
+	python_has_version "dev-python/lxml[${PYTHON_USEDEP}]"
+}
+
+pkg_setup() {
+	local CONFIG_CHECK="~CGROUPS ~EPOLL ~INOTIFY_USER ~SIGNALFD ~TIMERFD"
+
+	use kernel_linux && linux-info_pkg_setup
+}
+
+src_prepare() {
+	default
+	xdg_environment_reset
+}
+
+src_configure() {
+	if use cgroup-hybrid; then
+		cgroupmode="hybrid"
+	else
+		cgroupmode="unified"
+	fi
+
+	python_setup
+
+	EMESON_BUILDTYPE="$(usex debug debug release)"
+
+	local emesonargs=(
+		-Ddocdir="${EPREFIX}/usr/share/doc/${PF}"
+		-Dhtmldir="${EPREFIX}/usr/share/doc/${PF}/html"
+		-Dudevrulesdir="${EPREFIX}$(get_udevdir)"/rules.d
+		--libexecdir="lib/elogind"
+		--localstatedir="${EPREFIX}"/var
+		-Dbashcompletiondir="${EPREFIX}/usr/share/bash-completion/completions"
+		-Dman=auto
+		-Dsmack=true
+		-Dcgroup-controller=openrc
+		-Ddefault-hierarchy=${cgroupmode}
+		-Ddefault-kill-user-processes=false
+		-Dacl=$(usex acl enabled disabled)
+		-Daudit=$(usex audit enabled disabled)
+		-Dhtml=$(usex doc auto disabled)
+		-Dpam=$(usex pam enabled disabled)
+		-Dpamlibdir="$(getpam_mod_dir)"
+		-Dselinux=$(usex selinux enabled disabled)
+		-Dtests=$(usex test true false)
+		-Dutmp=$(usex elibc_musl false true)
+		-Dmode=release
+	)
+
+	meson_src_configure
+}
+
+src_install() {
+	meson_src_install
+	keepdir /var/lib/elogind
+
+	newinitd "${FILESDIR}"/${PN}.init-r1 ${PN}
+
+	newconfd "${FILESDIR}"/${PN}.conf ${PN}
+}
+
+pkg_postinst() {
+	udev_reload
+	if ! use pam; then
+		ewarn "${PN} will not be managing user logins/seats without USE=\"pam\"!"
+		ewarn "In other words, it will be useless for most applications."
+		ewarn
+	fi
+	if ! use policykit; then
+		ewarn "loginctl will not be able to perform privileged operations without"
+		ewarn "USE=\"policykit\"! That means e.g. no suspend or hibernate."
+		ewarn
+	fi
+	if [[ "$(rc-config list boot | grep elogind)" != "" ]]; then
+		elog "elogind is currently started from boot runlevel."
+	elif [[ "$(rc-config list default | grep elogind)" != "" ]]; then
+		ewarn "elogind is currently started from default runlevel."
+		ewarn "Please remove elogind from the default runlevel and"
+		ewarn "add it to the boot runlevel by:"
+		ewarn "# rc-update del elogind default"
+		ewarn "# rc-update add elogind boot"
+	else
+		elog "elogind is currently not started from any runlevel."
+		elog "You may add it to the boot runlevel by:"
+		elog "# rc-update add elogind boot"
+		elog
+		elog "Alternatively, you can leave elogind out of any"
+		elog "runlevel. It will then be started automatically"
+		if use pam; then
+			elog "when the first service calls it via dbus, or"
+			elog "the first user logs into the system."
+		else
+			elog "when the first service calls it via dbus."
+		fi
+	fi
+
+	for version in ${REPLACING_VERSIONS}; do
+		if ver_test "${version}" -lt 252.9; then
+			elog "Starting with release 252.9 the sleep configuration is now done"
+			elog "in the /etc/elogind/sleep.conf. Should you use non-default sleep"
+			elog "configuration remember to migrate those to new configuration file."
+		fi
+	done
+}
+
+pkg_postrm() {
+	udev_reload
+}
diff --git a/sys-auth/elogind/files/elogind-255.5-musl.patch b/sys-auth/elogind/files/elogind-255.5-musl.patch
new file mode 100644
index 0000000000000..c92fa11fcf3aa
--- /dev/null
+++ b/sys-auth/elogind/files/elogind-255.5-musl.patch
@@ -0,0 +1,196 @@
+diff --git a/src/basic/cgroup-util.c b/src/basic/cgroup-util.c
+index 90cfeb5..b88ac7c 100644
+--- a/src/basic/cgroup-util.c
++++ b/src/basic/cgroup-util.c
+@@ -1535,7 +1535,11 @@ int cg_path_get_session(const char *path, char **ret_session) {
+         if (e == n)
+                 return -ENXIO;
+ 
++#if defined(__GLIBC__)
+         start = strndupa(e, n - e);
++#else
++        start = strndup(e, n - e);
++#endif
+         start = cg_unescape(start);
+ 
+         if (!start[0])
+diff --git a/src/basic/errno-util.h b/src/basic/errno-util.h
+index 27804e6..63a83ed 100644
+--- a/src/basic/errno-util.h
++++ b/src/basic/errno-util.h
+@@ -10,12 +10,20 @@
+ /* strerror(3) says that glibc uses a maximum length of 1024 bytes. */
+ #define ERRNO_BUF_LEN 1024
+ 
++// https://github.com/chriskohlhoff/asio/blob/efdc25ab99786101351a5afb39f01dfaf0781401/asio/include/asio/impl/error_code.ipp#L188
++// Helper function to adapt the result from glibc's variant of strerror_r.
++#if defined(__GLIBC__)
++static const char* strerror_result(const char* s, const char*) { return s; }
++#else
++static const char* strerror_result(int, const char* s) { return s; }
++#endif
++
+ /* Note: the lifetime of the compound literal is the immediately surrounding block,
+  * see C11 §6.5.2.5, and
+  * https://stackoverflow.com/questions/34880638/compound-literal-lifetime-and-if-blocks
+  *
+  * Note that we use the GNU variant of strerror_r() here. */
+-#define STRERROR(errnum) strerror_r(abs(errnum), (char[ERRNO_BUF_LEN]){}, ERRNO_BUF_LEN)
++#define STRERROR(errnum) strerror_result(strerror_r(abs(errnum), (char[ERRNO_BUF_LEN]){}, ERRNO_BUF_LEN), (char[ERRNO_BUF_LEN]){})
+ 
+ /* A helper to print an error message or message for functions that return 0 on EOF.
+  * Note that we can't use ({ … }) to define a temporary variable, so errnum is
+diff --git a/src/basic/missing_prctl.h b/src/basic/missing_prctl.h
+index 7d9e395..5320169 100644
+--- a/src/basic/missing_prctl.h
++++ b/src/basic/missing_prctl.h
+@@ -1,7 +1,9 @@
+ /* SPDX-License-Identifier: LGPL-2.1-or-later */
+ #pragma once
+ 
++#if defined(__GLIBC__)
+ #include <linux/prctl.h>
++#endif
+ 
+ /* 58319057b7847667f0c9585b9de0e8932b0fdb08 (4.3) */
+ #ifndef PR_CAP_AMBIENT
+diff --git a/src/basic/rlimit-util.c b/src/basic/rlimit-util.c
+index 091c111..59bdc35 100644
+--- a/src/basic/rlimit-util.c
++++ b/src/basic/rlimit-util.c
+@@ -428,11 +428,7 @@ int rlimit_nofile_safe(void) {
+         rl.rlim_max = MIN(rl.rlim_max, (rlim_t) read_nr_open());
+         rl.rlim_cur = MIN((rlim_t) FD_SETSIZE, rl.rlim_max);
+         if (setrlimit(RLIMIT_NOFILE, &rl) < 0)
+-#ifdef __GLIBC__ /// To be compatible with musl-libc, elogind uses an (uintmax_t) cast.
+                 return log_debug_errno(errno, "Failed to lower RLIMIT_NOFILE's soft limit to " RLIM_FMT ": %m", rl.rlim_cur);
+-#else // __GLIBC__
+-                return log_debug_errno(errno, "Failed to lower RLIMIT_NOFILE's soft limit to " RLIM_FMT ": %m", (uintmax_t)rl.rlim_cur);
+-#endif // __GLIBC__
+ 
+         return 1;
+ }
+diff --git a/src/libelogind/sd-bus/bus-error.c b/src/libelogind/sd-bus/bus-error.c
+index f415797..b65f9d0 100644
+--- a/src/libelogind/sd-bus/bus-error.c
++++ b/src/libelogind/sd-bus/bus-error.c
+@@ -410,7 +410,7 @@ static void bus_error_strerror(sd_bus_error *e, int error) {
+                         return;
+ 
+                 errno = 0;
+-                x = strerror_r(error, m, k);
++                x = strerror_result(strerror_r(error, m, k), m);
+                 if (errno == ERANGE || strlen(x) >= k - 1) {
+                         free(m);
+                         k *= 2;
+@@ -596,7 +596,7 @@ const char* _bus_error_message(const sd_bus_error *e, int error, char buf[static
+         if (e && e->message)
+                 return e->message;
+ 
+-        return strerror_r(abs(error), buf, ERRNO_BUF_LEN);
++        return strerror_result(strerror_r(abs(error), buf, ERRNO_BUF_LEN), buf);
+ }
+ 
+ static bool map_ok(const sd_bus_error_map *map) {
+diff --git a/src/libelogind/sd-event/sd-event.c b/src/libelogind/sd-event/sd-event.c
+index 1660846..67bb6b2 100644
+--- a/src/libelogind/sd-event/sd-event.c
++++ b/src/libelogind/sd-event/sd-event.c
+@@ -1888,7 +1888,9 @@ _public_ int sd_event_trim_memory(void) {
+ 
+         usec_t before_timestamp = now(CLOCK_MONOTONIC);
+         hashmap_trim_pools();
++#if defined(__GLIBC__)
+         r = malloc_trim(0);
++#endif
+         usec_t after_timestamp = now(CLOCK_MONOTONIC);
+ 
+         if (r > 0)
+diff --git a/src/libelogind/sd-journal/journal-file.h b/src/libelogind/sd-journal/journal-file.h
+index c3c5f59..d66948d 100644
+--- a/src/libelogind/sd-journal/journal-file.h
++++ b/src/libelogind/sd-journal/journal-file.h
+@@ -1,6 +1,7 @@
+ /* SPDX-License-Identifier: LGPL-2.1-or-later */
+ #pragma once
+ 
++#include <sys/stat.h>
+ #include <fcntl.h>
+ #include <inttypes.h>
+ //#include <sys/uio.h>
+diff --git a/src/login/logind-inhibit.c b/src/login/logind-inhibit.c
+index 86d1f84..0480652 100644
+--- a/src/login/logind-inhibit.c
++++ b/src/login/logind-inhibit.c
+@@ -27,6 +27,10 @@
+ #include "tmpfile-util.h"
+ #include "user-util.h"
+ 
++#if !defined(__GLIBC__)
++#define basename(src) (strrchr(src, '/') ? strrchr(src, '/') + 1 : src)
++#endif
++
+ static void inhibitor_remove_fifo(Inhibitor *i);
+ 
+ int inhibitor_new(Inhibitor **ret, Manager *m, const char* id) {
+diff --git a/src/login/logind-seat.c b/src/login/logind-seat.c
+index bef542d..5902cd2 100644
+--- a/src/login/logind-seat.c
++++ b/src/login/logind-seat.c
+@@ -25,6 +25,10 @@
+ #include "terminal-util.h"
+ #include "tmpfile-util.h"
+ 
++#if !defined(__GLIBC__)
++#define basename(src) (strrchr(src, '/') ? strrchr(src, '/') + 1 : src)
++#endif
++
+ int seat_new(Seat** ret, Manager *m, const char *id) {
+         _cleanup_(seat_freep) Seat *s = NULL;
+         int r;
+diff --git a/src/login/logind-session.c b/src/login/logind-session.c
+index 188dc24..ff502b0 100644
+--- a/src/login/logind-session.c
++++ b/src/login/logind-session.c
+@@ -43,6 +43,10 @@
+ #include "cgroup-setup.h"
+ #include "extract-word.h"
+ 
++#if !defined(__GLIBC__)
++#define basename(src) (strrchr(src, '/') ? strrchr(src, '/') + 1 : src)
++#endif
++
+ #define RELEASE_USEC (20*USEC_PER_SEC)
+ 
+ static void session_remove_fifo(Session *s);
+diff --git a/src/shared/common-signal.c b/src/shared/common-signal.c
+index 8e70e36..45b533c 100644
+--- a/src/shared/common-signal.c
++++ b/src/shared/common-signal.c
+@@ -66,10 +66,12 @@ int sigrtmin18_handler(sd_event_source *s, const struct signalfd_siginfo *si, vo
+                         break;
+                 }
+ 
++#if defined(__GLIBC__)
+                 if (malloc_info(0, f) < 0) {
+                         log_error_errno(errno, "Failed to invoke malloc_info(): %m");
+                         break;
+                 }
++#endif
+ 
+                 (void) memstream_dump(LOG_INFO, &m);
+                 break;
+diff --git a/src/shared/user-record-nss.h b/src/shared/user-record-nss.h
+index 7a41be7..7e68950 100644
+--- a/src/shared/user-record-nss.h
++++ b/src/shared/user-record-nss.h
+@@ -2,7 +2,9 @@
+ #pragma once
+ 
+ #include <grp.h>
++#if defined(__GLIBC__)
+ #include <gshadow.h>
++#endif
+ #include <pwd.h>
+ #include <shadow.h>
+ 
