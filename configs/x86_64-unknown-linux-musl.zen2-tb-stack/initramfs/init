#!/bin/toybox sh

export PATH=/bin:/usr/bin:/sbin:/usr/sbin
cd /bin
for i in $(./toybox); do ln -s toybox $i; done

mount -t devtmpfs none /dev

mount -t proc none /proc
mount -t sysfs none /sys

if cat /proc/cmdline | tr ' ' '\n' | grep -q nobattmsr
then
	wrmsr 0x1FC $(($(rdmsr -a -d 0x1FC | head -n 1 | sed -e 's/CPU .: //') - 1))
fi

modprobe virtio_blk
modprobe squashfs
modprobe overlay
modprobe netfs
modprobe 9p
modprobe 9pnet
modprobe 9pnet_virtio
modprobe loop max_loop=8

SQUASH_DEV='none'
if cat /proc/cmdline | tr ' ' '\n' | grep -q squash_dev
then
	SQUASH_DEV="$(cat /proc/cmdline | tr ' ' '\n' | grep -m 1 squash_dev)"
fi

SQUASH_DIR='.'
if cat /proc/cmdline | tr ' ' '\n' | grep -q squash_dir
then
	SQUASH_DIR="$(cat /proc/cmdline | tr ' ' '\n' | grep -m 1 squash_dir)"
fi

SQUASH_TYPE=''
if cat /proc/cmdline | tr ' ' '\n' | grep -q squash_type
then
	SQUASH_TYPE="$(cat /proc/cmdline | tr ' ' '\n' | grep -m 1 squash_type)"
fi

SQUASH_STACK='extra'
if cat /proc/cmdline | tr ' ' '\n' | grep -q squash_stack
then
	SQUASH_STACK="$(cat /proc/cmdline | tr ' ' '\n' | grep -m 1 squash_stack)"
fi

SQUASH_LOAD="${SQUASH_STACK}"
if cat /proc/cmdline | tr ' ' '\n' | grep -q squash_load
then
	SQUASH_LOAD="$(cat /proc/cmdline | tr ' ' '\n' | grep -m 1 squash_load)"
fi

SQUASH_DEV="${SQUASH_DEV#squash_dev=}"
SQUASH_DIR="${SQUASH_DIR#squash_dir=}"
SQUASH_TYPE="${SQUASH_TYPE#squash_type=}"
SQUASH_LOAD="${SQUASH_LOAD#squash_load=}"
SQUASH_STACK="${SQUASH_STACK#squash_stack=}"

if [ "${SQUASH_TYPE}" != "" ]
then
	SQUASH_TYPE="-t ${SQUASH_TYPE} "
fi

while ([ "${SQUASH_DEV}" != "none" ] && ([ "${SQUASH_TYPE}" != "9p" ] && [ ! -e "/dev/${SQUASH_DEV}" ])) || [ "${SQUASH_DEV}" = "none" ]
do
	umount /dev
	sleep 2
	mount -t devtmpfs none /dev
	if [ "${SQUASH_DEV}" = "none" ]
	then
		for dev in /dev/cdroms/* /dev/ide/cd/* /dev/sr* /dev/sd* /dev/hd* /dev/vd* /dev/ubd* /dev/ubd/* /dev/iseries/vcd* /dev/mmcblk* /dev/mmcblk*/*
		do
			if [ -e "${dev}" ]
			then
				mount -o ro ${SQUASH_TYPE}${dev} /mnt
				if [ -e "/mnt/${SQUASH_DIR}/config" ]
				then
					SQUASH_DEV="${dev#/dev/}"
				fi
				umount /mnt
			fi
		done
	fi
done

DOCACHE="no"
if cat /proc/cmdline | tr ' ' '\n' | grep -q docache
then
	DOCACHE="yes"
fi

mount -t tmpfs tmpfs /mnt
mkdir /mnt/b /mnt/u /mnt/w /mnt/m /mnt/c /mnt/sd

for sqstack in $(echo -n "${SQUASH_STACK}" | tr ':' ' ')
do
	mkdir /mnt/${sqstack}.dir
done

mount -o ro$(echo ${SQUASH_TYPE} | grep -q 9p && echo -n ',trans=virtio') \
	${SQUASH_TYPE}$(echo ${SQUASH_TYPE} | grep -qv 9p && echo -n '/dev/')${SQUASH_DEV} /mnt/sd || sleep 1

if [ "${DOCACHE}" = "yes" ] || [ -f /base ]
then
	if [ -f "/mnt/sd/${SQUASH_DIR}/config" ]
	then
		cp -a /mnt/sd/${SQUASH_DIR}/config /mnt/config
		mount -t squashfs /mnt/config /mnt/c
	fi
	if [ -f /base ]
	then
		mount -t squashfs /base /mnt/b
	else
		cp -a /mnt/sd/${SQUASH_DIR}/base /mnt/base
		mount -t squashfs /mnt/base /mnt/b
	fi
	for sqload in $(echo -n "${SQUASH_LOAD}" | tr ':' ' ')
	do
		if [ ! -f /${sqload} ]
		then
			cp -a /mnt/sd/${SQUASH_DIR}/${sqload} /mnt/${sqload}
		fi
	done
	for sqstack in $(echo -n "${SQUASH_STACK}" | tr ':' ' ')
	do
		if [ -f /${sqstack} ]
		then
			mount -t squashfs /${sqstack} /mnt/${sqstack}.dir
		else
			#cp /mnt/sd/${SQUASH_DIR}/extra /mnt/extra
			mount -t squashfs /mnt/${sqstack} /mnt/${sqstack}.dir
		fi
	done
	#if [ -f /extra ]
	#then
		#mount -t squashfs /extra /mnt/e
	#else
		#cp /mnt/sd/${SQUASH_DIR}/extra /mnt/extra
		#mount -t squashfs /mnt/extra /mnt/e
	#fi
	umount /mnt/sd
else
	if [ -f "/mnt/sd/${SQUASH_DIR}/config" ]
	then
		mount -o ro -t squashfs /mnt/sd/${SQUASH_DIR}/config /mnt/c
	fi
	mount -o ro -t squashfs /mnt/sd/${SQUASH_DIR}/base /mnt/b
	for sqstack in $(echo -n "${SQUASH_STACK}" | tr ':' ' ')
	do
		mount -o ro -t squashfs /mnt/sd/${SQUASH_DIR}/${sqstack} /mnt/${sqstack}.dir
	done
fi

SQUASH_LOWER=''
for sqstack in $(echo -n "${SQUASH_STACK}" | tr ':' ' ')
do
	SQUASH_LOWER="${SQUASH_LOWER}:/mnt/${sqstack}.dir"
done

#mount -t overlay overlay -olowerdir=/mnt/c:/mnt/e:/mnt/b,upperdir=/mnt/u,workdir=/mnt/w /mnt/m
mount -t overlay overlay -olowerdir=/mnt/c${SQUASH_LOWER}:/mnt/b,upperdir=/mnt/u,workdir=/mnt/w /mnt/m

if [ "${DOCACHE}" = "no" ] && [ ! -f /base ]
then
	mkdir -p /mnt/m/mnt/sd
	mount --move /mnt/sd /mnt/m/mnt/tmp/sd
fi

mkdir /mnt/m/mnt/tmp
mount --rbind /mnt /mnt/m/mnt/tmp

cd /mnt/m
for i in $(LD_LIBRARY_PATH="/mnt/m/lib:/mnt/m/lib64:/mnt/m/usr/lib:/mnt/m/usr/lib64" ./usr/bin/toybox --long); do ln -s /usr/bin/toybox ./${i}; done
#if [ -e usr/lib64 ]
#then
#	cd usr/lib64
#	ln -s ../lib/*.so* ./
#fi

mkdir /mnt/m/root

umount /proc
umount /sys
umount /dev

exec switch_root /mnt/m /usr/lib/ld-musl-x86_64.so.1 /usr/bin/toybox init || exec sh
